#+TITLE: Junhan 的 Emacs 配置
#+AUTHOR: Junahan
#+EMAIL: junahan@outlook
#+DATE: 2018-3-27
#+LICENSE: CC BY 4.0

* 摘要
我的 Emacs 配置，初始版本从[[https://github.com/cnsworder/crossemacs][ Crossemacs]] 复制。参阅 [[https://github.com/purcell/emacs.d][purcell Emacs]] 以及其他人的 Emacs 配置 ，详情请看[[references][参考文献]]小节。

主要需求是使用 Org-mode，Python，C/C++ 以及  Java 开发环境。

/特别提醒，本Emacs配置仅在如下环境进行过测试:/
#+BEGIN_QUOTE
 OS: Darwin ... Darwin Kernel Version 17.4.0
 Emacs: GNU Emacs 25.3.1
#+END_QUOTE

* 支持特性 <<features>>
1. init.el - 位于 .emacs.d 目录下的 Emacs 配置文件入口，在这里加载 lisp 目录下的配置子模块。
3. init-cask.el - 使用 Cask + pallet 管理Emacs包
5. init-utils.el - 一些用于配置文件的工具函数定义。
7. init-common.el - 通用配置。例如 Speedbar, Projectile, Yasnippet 等。
8. init-git.el - 使用 Magit 作为 Git Emacs 前端。
10. init-company.el - 使用 Company 做通用补全，对于不同的语言，可以配置不同的补全后端。
11. init-flycheck.el - 配置 Flycheck 作为代码飞行检查。
12. init-ivy-counsel.el - 使用 Ivy + Counsel + Swiper。
14. init-helm.el - 使用 Helm 作为增量补全和缩减选择的工具，并使用 Helm Projectile 管理项目。
15. init-helm-gtags.el - 使用 helm-gtags 配置标签索引。
17. init-cpp.el - c/c++ 语言相关配置
18. init-cedet.el - CEDET 工具配置，包括 Semantic, Senator 等。
20. init-python.el - 配置 Python 开发环境，使用 Elpa 并使用 Conda 管理虚拟环境 。
22. init-ein.el - 配置 EIN (Emacs IPython Notebook) 作为 Jupter Notebook Emacs 客户端。
24. init-org.el - 配置 Org 模块。
25. init-theme - 配置使用 gruvbox 主题，配置其他主题相关，如字体，highligh-parentheses, popwin, frame size 等。
28. init-dashboard.el - Dashboard 相关配置。
30. init-keyset.el - 配置通用快捷键。

* 快速启用 <<quick-guide>>

** 安装 Emacs 和 Cask
使用 Homebrew 安装 Emacs 和 Cask（Emacs 包管理工具）：

#+BEGIN_SRC sh
$ brew install emacs cask
#+END_SRC

** Clone junanhan-emacs.git 项目
运行如下命令从 Github Clone junahan-emacs.git 项目：

#+BEGIN_SRC 
# Clone 项目
git clone https://github.com/junahan/junahan-emacs.git
#+END_SRC

** 测试
通过运行项目目录中的脚本 test-startup.sh 运行测试，测试使用项目目录作为 HOME 目录运行测试脚本，测试脚本会自动运行 cask 安装必要的依赖包。

#+BEGIN_SRC 
# Emacs debug-init模式运行测试
./test-startup.sh
#+END_SRC

** 部署
通过运行项目目录中的脚本  deploy.sh 部署，部署脚本会根据需要安装必要的依赖包。为了确保 Emacs 能够正确的从 ~/.emacs.d 目录启动，该脚本备份你的 ~/.emacs 文件和 ～/.eamcs.d 目录分别为 ~/.emacs.backup 和 ～/.emacs.d.backup 。

#+BEGIN_SRC 
# 使用stow安装至 ～/.emacs.d 目录
./deploy.sh
#+END_SRC

* 常用 Emacs Mode 介绍
本节简单介绍一些常用的 Emacs Mode，也是 junahan-emacs 项目使用到的 Emacs 模块。通过这些介绍，你可以大致了解到这些模块的功能、配置和使用。

** Company 和 =company-backends= 变量
Company 是一个文本补全框架，该命名意思是“完成任何事情”，文本补全框架通过可插拔前后端获取和显示补全候选列表。可选的后端包括 Elisp, Clang, Ispell, CMake, Yasnippet, etags, gtags, files, keywrods, semantics 等等。通过配置 company-backends 变量支持后端列表。

*** Company 相关插件模块
- company-capf: CAPF 后端，提供一个桥接至标准 =completion-at-point-functions= 设施（在输入点的上下文显示补全候选列表），方便所有主模式定义 CAPF 补全。
- company-keywrods: 当前文件所属模式语法关键词。
- company-files: 补全文件路径。
- company-ispell: 英文输入提示。
- company-ycmd: 使用 YCMD 的 c/c++ 代码补全后端。
- company-semantic: 使用 Semantic 上下文索引数据库进行补全。
- company-yasnippet: 使用 Yasnippet 模版补全。
- company-gtags: 使用 GNU Global 源代码静态索引数据库补全。
- company-etags: 使用 Etags 索引数据库补全。
- elpy-company-backend: Python代码补全后端。
- company-dabbrev: 将当前打开的所有 buffer 中的关键字作为补全显示(默认不使用 scratch buffer)。

/如果在补全过程中取消了补全, 也可以使用命令再次开启补全。例如 company-files 补全方式就可以使用 company-files 函数开启。/

*** 激活 Company 通用支持
通过如下配置激活该 Ccompany Global Mode：

#+BEGIN_SRC lisp
;; Enable global-company-mode.
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** 配置 =company-backends= 变量
Company Global Mode 默认后端配置大多数情况下工作良好，并能够根据和其他模块配合为不同的开发环境加载合适的后端模块。少数情况下，你需要修改 =company-backends= 变量。

下面的代码将 =company-c-headers= 后端加入 =company-backends= 列表
#+BEGIN_SRC lisp
;; add company-c-header to company-backends
(require 'company-c-headers)
(after-load 'company
  (add-hook 'c-mode-common-hook
            (add-to-list ('company-backends 'company-c-headers))))
#+END_SRC

以上代码修改全局 =company-backends= ，也就是说该配置一旦加载，对其他环境（如 Python 开发环境）也有效。你可以通过创建一个缓冲区局部变量修改该行为。
#+BEGIN_SRC lisp
;; function to push company backend to local variable - company-backends.
(defun sanityinc/local-push-company-backend (backend)
  "Add BACKEND to a buffer-local version of 'company-backends'."
  (make-local-variable 'company-backends)
  (push backend company-backends))

;; add company-c-header to company-backends
(require 'company-c-headers)
(after-load 'company
  (add-hook 'c-mode-common-hook
            (lambda () (sanityinc/local-push-company-backend 'company-c-headers))))
#+END_SRC

** Flycheck
Flycheck 是一个飞行句法检查和提示工具，它使用多种语法检查和提示工具在你输入的时候自动检查缓冲区内容，并在缓冲区直接提示和报告警告和错误。Fly check 支持超过 40 多种不同编程语言和 80 多种语法检查工具，并有许多第三方扩展可供选择。

#+BEGIN_SRC lisp
;; enable global flycheck mode
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))
#+END_SRC

** TODO Helm
Helm 是一个增量补全和缩减选择的 Emacs 框架。它为开发人员提供非常容易使用的 API 以开发基于 Helm 的 Emacs 应用，同时提供了强大的搜索工具以及许多内建支持几乎所有常用的补全命令。

*** 安装和配置
*** Usage
*** 使用 Helm Projectile 管理项目

** TODO Magit
[[https://github.com/magit/magit/blob/master/Documentation/magit.org][Magit]] 是优秀的 Emacs Git 前端，实现大多数 Git 命令，足够处理常用的版本管理任务，可以让你不离开 Emacs 使用 Git。

/TODO .../

** TODO Projectile
/TODO .../

** TODO ORG
- 使用 Capture 快速添加 TODO 和 NOTE。
- 指定org-agenda-dir，Emacs会从指定目录下的所有 .org 文件抽取日程安排。
#+BEGIN_SRC elisp
;; define the refile targets
(defvar org-agenda-dir "")
(setq-default org-agenda-dir "~/org")
(setq org-default-notes-file "~/org/refile.org")
(setq org-agenda-files (list org-agenda-dir))
#+END_SRC

* 开发环境 <<ide>>
** Python IDE
使用 Emacs 及 Python 相关插件模块，可以自己动手，构建一个完善的 Python IDE 开发环境，除了支持基本的代码编辑、自动补全、代码调试以外，还支持 Python 虚拟环境、Jupyter Notebook 集成、Org 模块集成等。

有关详情，请参阅 [[file:docs/python-ide.org][Python IDE]] (TODO...)。

** C/C++ IDE
使用 Emacs 可以构建一个完整的 C/C++ IDE 开发环境，从代码编辑、自动补全、代码调试、编译、运行测试到重构，甚至是项目管理均有良好的支持。

有关详情，请参阅 [[file:docs/cpp-ide.org][C/C++ IDE]] (TODO...)。

* 参考文献 <<references>>
1. GNU Emacs, https://www.gnu.org/software/emacs/
2. crossemacs, [[https://github.com/cnsworder/crossemacs]].
3. purcell, [[https://github.com/purcell/emacs.d]].
4. compay, https://company-mode.github.io.
6. Emacs: 最好的 Python 编辑器, [[https://segmentfault.com/a/1190000004165173]].
7. Emacs IPython Notebook, [[https://tkf.github.io/emacs-ipython-notebook/]].
9. elpy,  https://elpy.readthedocs.io/en/latest/introduction.html.
11. ein,  https://millejoh.github.io/emacs-ipython-notebook/.
13. Master Emacs in 21 Days, zilongshanren, http://book.emacs-china.org/#orgheadline1.
15. IPython Notebook, https://ipython.readthedocs.io/en/stable/.
17. C/C++Development Environment for Emacs - https://tuhdo.github.io/c-ide.html.
19. Ivy User Manual - https://oremacs.com/swiper/.
21. Ivy swiper - https://github.com/abo-abo/swiper.
23. A Package in a league of its own: Helm - https://tuhdo.github.io/helm-intro.htm.
25. Exploring large projects with Projectile and Helm Projectile - https://tuhdo.github.io/helm-projectile.html.
27. Helm Github - https://github.com/emacs-helm/helm.
29. Python Progromming In Emacs - https://www.emacswiki.org/emacs?action=browse;oldid=PythonMode;id=PythonProgrammingInEmacs.

#+BEGIN_QUOTE
本作品采用[[http://creativecommons.org/licenses/by/4.0/][知识共享署名 4.0 国际许可协议]]进行许可。
#+END_QUOTE
